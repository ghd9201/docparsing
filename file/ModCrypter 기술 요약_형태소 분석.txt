ModCrypter
기술
문서
Export
Table
RVA
Size
Import
Table
RVA
Size
IAT
RVA
Size
ModCrypter
기술
요약
Portable
Executable
File
구조
Dos
Stub
PE
Header
File
Header
Optional
Header
Data
Directories
Section
Headers
Section
Header
Section
Section
Section
서명
으로
사용
ㄴ다
PE
Header
File
Header
그림
PE
File
구조
Dos
Stub
Signature
16
비트
윈도우
호환
위하
사용
헤더
로써
100
바이트
정도
구성
IMAGE
DOS
HEADER
구조체
구조
정의
으며
처음
바이트
MZ
실행
가능
시스템
섹션
PE
파일
전반적
정보
제공
ModCrypter
기술
문서
ii
Optional
Header
Section
Header
있다
Section
Raw
Data
File
Header
기록
정보
보다
좀더
다양
PE
파일
정보
제공
헤더
PE
파일
나타내
Magic
Number
링커
버전
코드
데이터
베이스
RVA
프로그램
시작
주소
Entry
Point
RVA
PE
파일
정보
테이블
기록
Section
Header
프로그램
실행
필요
코드
데이터
소스
그리고
기타
Section
헤더
Section
Header
Section
RVA
Virtual
Size
Low
Data
Offset
Low
Data
Size
Section
관련
정보
PE
파일
에서
프로그램
실행
코드
데이터
소스
부분
컴파일러
따르
Section
이름
달라지
으며
PE
파일
적어도
하나
Section
가지
어야
ㄴ다
ModCrypter
에서
암호화하
Section
코드
영역
Section
이름
text
code
CODE
데이터
Section
이름
data
data
DATA
주석
RVA
Relative
Virtual
Address
PE
파일
메모리
사상
정보
조각
주소
표현
위하
사용
으로
메모리
사상
주소
일정
으므로
Image
Base
와의
상대
거리
표현
그림
메모리
사상
Memory
Mapped
PE
파일
ModCrypter
기술
문서
ModCrypter
적용
PE
파일
구조
Export
Table
주소
수정
Import
Table
주소
수정
TLS
Table
주소
수정
Import
Address
Table
주소
Dos
Stub
PE
Header
File
Header
수정
Optional
Header
Data
Directories
Section
Headers
text
Header
Loader
Section
Header
Encrypted
text
Section
Section
Section
Loader
Section
Loader
Stub
암호화
Loader
그림
ModCrypter
적용
PE
파일
구조
ModCrypter
기술
문서
Loader
Section
구조
Loader
Section
Loader
Stub
Loader
PE
Table
IDT
IAT
INT
Informatioin
Trap
Trap
Permutation
Code
for
Loader
Decryption
Code
Permutated
Loader
Decryption
Code
Encrypted
Loader
Code
Loader
Checksum
Code
Traps
Relocation
Flag
Table
RFT
생성
Import
Address
Table
Setting
Code
Section
Decryption
Code
Checksum
코드
Active
Protection
Code
Loader
Variables
암호화
Loader
Variables
TLS
Variable
Module
Type
Check
Variable
Etc
그림
ModCrypter
Loader
Section
구조
ModCrypter
기술
문서
Loader
Section
트랩
Anti
Debug
Anti
SoftIce
Partial
Checksum
XOR
Trap
버거
동작
유무
확인
코드
PEB
구조
SHE
Handler
Search
Service
통하
버거
발견
종료
또는
임의
주소
분기
도록
디버거
Breakpoint
설정
메모리
코드
변하
이용
Loader
특정
부분
올바르
Checksum
경우
다음
명령어
실행
로더
에서
사용
옵션
위하
암호화
옵션
에서
정상적
옵션
구하
현재
옵션
XOR
암호화
옵션
계산
옵션
계산
옵션
변수
저장
로더
복호
계산
옵션
암호화
옵션
계산
정상적
옵션
있음
치환
Loader
복호
코드
버거
또는
사용
Loader
Section
Loader
복호
코드
테이
참조
방지
위하
Loader
Decryption
Code
치환
permutation
설명
Loader
Decode
Buffer
OPCODE
Mix
Decode
Buffer
방식
Random
Number
xor
xor
xor
생성
상태
60
xor
60
xor
Bfe
Bf
xor
Random
number
으로
루프
한번
실행
byte
byte
ESI
EDI
ModCrypter
기술
문서
루프
마지막
실행
byte
byte
EDI
AL
XOR
BL
Loader
Section
Code
Section
복호
byte
byte
byte
byte
byte
Relocation
text
Section
OpCode
OpCode
OpCode
OpCode
OpCode
OpCode
OpCode
OpCode
OpCode
OpCode
암호화
복호
명령어
코드
명령어
코드
그림
코드
영역
암호화
복호
과정
ModCrypter
기술
문서
Loader
복호
방식
Section
Encryption
방식
에서
Relocation
Flag
Table
참조
제외
동일
복호
복호
명령어
코드
통하
암호화
방식
일하
동작
ㄴ다
암호화
과정
파일
위치
text
Section
영역
text
Section
영역
크기
계산
암호화
복호
함수
코드
생성
암호화
섹션
암호화
Relocation
Flag
Table
생성
Dll
또는
OCX
경우
ImageBase
충돌
일어나
Relocation
Table
참조
Relocation
Flag
Table
생성
ㄴ다
부록
참고
junk
code
구성
기로
함께
생성
ㄴ다
23
가지
하드웨어
명령어
구성
배열
에서
96
60
바이트
크기
명령
어르
임의
선택
ㄴ다
23
가지
하드웨어
명령어
reversible
code
하드웨어
명령어
연산자
필요
경우
Pseudo
random
number
생성
과정
에서
정보
암호화
명령어
코드
이블를
생성
ㄴ다
암호화
명령어
코드
성시
복호
위하
암호화
명령어
코드
대응하
복호
명령어
코드
테이블
함께
생성
Relocation
Flag
Table
함께
영역
복사
ㄴ다
그림
같이
암호화
대상
섹션
Relocation
Flag
Table
참조
바이트
단위
암호화
ㄴ다
모듈
Relocation
Table
참조
Relocation
Flag
Table
00
경우
현재
위치
바이트
암호화
SKIP
복호
과정
PE
파일
암호화
암호화
명령어
테이블
생성
함께
생성
복호
명령
테이블
로더
위치
있다
PE
파일
코드
영역
위치
RVA
크기
ㄴ다
PE
헤더
분석
코드
영역
복호
명령어
테이블
Relocation
Flag
Table
참조
복호
Loader
Section
Code
Section
체크
Section
결성
검증
위하
Section
바이트
연쇄적
으로
더하
암호화
Loader
변수
저장
ㄴ다
ModCrypter
기술
문서
Data
Section
복호
data
섹션
복호
경우
코드
영역
암호화
방식
으나
고객
PC
에서
수집
하드웨어
정보
벤더
암호화
연산
재료
사용
재료
일치
으면
정상
동작
차이점
다음
Data
섹션
벤더
가지
복호
과정
그림
으로
내었
벤더
생성
ModCrypter
등록
발급
벤더
레지스
트리
정보
직접
계산
벤더
데이터
섹션
복호
재료
사용
ㄴ다
정상
적인
등록
라면
레지스
트리
계산
Relocation
byte
byte
byte
byte
byte
data
Section
OpCode
OpCode
OpCode
OpCode
OpCode
OpCode
OpCode
OpCode
OpCode
OpCode
암호화
복호
명령어
코드
명령어
코드
등록
재료
128
bits
그림
데이터
영역
복호
과정
ModCrypter
기술
문서
Import
Address
Table
IAT
Setting
Imported
Symbol
IAT
컴파일러
함수
호출
구문
발견
함수
내부
모듈
는지
외부
모듈
dll
함수
ㄴ지
ㄹ지
못하
므로
CALL
XXXXXXXX
내부
또는
CALL
DWORD
PTR
XXXXXXXX
콛드
생성
못하
ㄴ다
결국
컴파일러
CALL
XXXXXXXX
같이
임시
Transfer
Area
가리키
Trampoline
Address
주소
고정
링커
함수
호출
대하
Stub
function
JMP
XXXXXXXX
형태
제공
실제
내부
모듈
인지
외부
모듈
호출
ㄴ지
구분
ㄴ다
만약
내부
모듈
함수
라면
링커
CALL
xXXXXXXXX
호출
Transfer
Area
XXXXXXXX
JMP
xYYYYYYYY
형태
외부
모듈
함수
라면
Transfer
Area
XXXXXXXX
JMP
DWORD
PTR
xYYYYYYYY
형태
ㄴ다
외부
모듈
DWORD
PTR
xYYYYYYYY
주소
xZZZZZZZZ
IAT
주소
시스템
모듈
올리
결정
므로
링커
임의
채우
ModCrypter
복호
Import
Address
Table
Re
Addressing
만약
IAT
text
영역
위치
ㄴ다면
암호화
모듈
실행
시스템
로더
암호
영역
IAT
영역
import
function
실제
주소
채우
ㄴ다
따라서
ModCrypter
로더
text
영역
복화
하면서
IAT
주소
바꾸
체크
ㄹ라
ModCrypter
기술
문서
ㄴ다
결국
복호
다시
IAT
Import
Function
주소
채우
어야
ㄴ다
Ordinal
Passing
IAT
채우
GetProcAdress
번째
인자
Ordinal
이면
Import
Name
Table
실제
데이터
WORD
Value
인자
전달
어야
ㄴ다
RVA
DATA
xXXXXXXXX
80000
40
VALUE
40
IAT
복호
SECTION
GetProcAddress
Base
Module
Function
Name
Import
Name
Table
참조
Function
Name
Loader
Code
Import
Directory
Table
원본
주소
Active
Protection
Code
Active
Anti
Debug
디버거
실행
프로세스
Attach
하여
디버깅
방지
위하
주기
으로
버거
존재
유무
검사
ㄴ다
일반적
으로
크래커
프로세스
디버깅
하기
윈도우
제공
함수
Break
Point
설정
디버깅
때문
윈도
제공
함수
사용
디버거
검사
어셈블리
코드
직접
작성
PEB
버거
존재
유무
검사
ㄴ다
Active
Anti
Dump
ModCrypter
암호화
PE
파일
메모리
로드
복화
때문
로드
프로세스
덤프
원본
코드
따라서
메모리
덤프
부터
덤프
방지
위하
PE
파일
헤더
정보
조작
ㄴ다
ModCrypter
기술
문서
Active
Anti
Memory
Hack
PE
파일
크래커
조작
ModCrypter
보호
지만
메모리
코드
영역
ㄴ다면
프로그램
의도
방식
으로
동작
따라서
메모리
사상
코드
영역
주기적
으로
검사
경우
종료
ㄴ다
Anti
API
Hooking
앞서
PE
파일
실행
참조
외부
함수
Import
Address
Table
통하
실제
주소
는다고
설명
만약
크래커
IAT
주소
바꿔치
IAT
Hook
ㄴ다면
프로그램
의도
데로
동작
따라서
ModCrypter
PE
파일
에서
IAT
설정
다음
Import
Descriptor
Table
RVA
로더
Import
Descriptor
Table
설정
Original
Entry
Point
Hiding
원본
시작
주소
바이트
100
의미
으로
조작
크래커
ModCrypter
적용
PE
파일
원본
덤프
어서
더라도
프로그램
정상
동작
ㄴ다
부록
참조
ModCrypter
기술
문서
부록
ModCrypter
DLL
Image
Base
Relocation
방법
Image
Base
Relocation
테이블
다음
구조체
구성
typedef
struct
IMAGE
BASE
RELOCATION
DWORD
VirtualAddress
DWORD
SizeOfBlock
IMAGE
BASE
RELOCATION
Data
의미
ModCrypter
기술
문서
Type
of
Relocation
02
Offset
of
VA
Type
of
Relocation
IMAGE
REL
BASED
ABSOLUTE
IMAGE
REL
BASED
HIGH
IMAGE
REL
BASED
LOW
IMAGE
REL
BASED
HIGHLOW
IMAGE
REL
BASED
HIGHADJ
IMAGE
REL
BASED
JMPADDR
IMAGE
REL
BASED
SECTION
IMAGE
REL
BASED
REL
32
Relocation
Offset
구하
Image
Base
RVA
RVA
of
Block
OffSet
of
VA
Block
Entry
SizeOfBlock
IMAGE
SIZEOF
BASE
RELOCATION
DLL
Relocation
Table
참조
ModCrypter
구현
암호화
단계
Relocation
Section
참조
여부
결정
생성
암호화
루틴
이전
Relocation
Table
참조
Relocation
Flag
Table
RFT
ModCrypter
기술
문서
섹션
암호화
RFT
참조
Relocation
바이트
제외
암호화
섹션
체크
RFT
참조
Relocation
바이트
제외
계산
복호
단계
Relocation
Section
참조
여부
결정
Relocation
Flag
Table
RFT
생성
ModCrypter
Loader
복호
루틴
이전
Relocation
Table
참조
섹션
복호
RFT
참조
Relocation
바이트
제외
복호
섹션
체크
RFT
참조
Relocation
바이트
제외
계산
Relocation
Flag
Table
암호화
이전
섹션
RVA
Data
Va
ue
RVA
Data
Value
암호화
이후
섹션
432897
ac
743984
2615132
123261
5132
76
43
22938
473434
8281
ac
72
261
5132
123
45
28
76
43
62
00000000000000
00000000000111
11111000000000
00011111111000
00000000000000
00000000000000
00000000000000
00000000011111
11100000000000
00000000000000
0000000000000
참조
Encryption
Function
ModCrypter
기술
문서
부록
Entry
Point
Hiding
기술
ModCrypter
PE
파일
암호화
PE
파일
시작
주소
부터
통하
적당
기계어
코드
크기
구하
로더
변수
저장
ㄴ다
Loader
프로그램
시작
주소
점프
코드
섹션
시작점
에서
저장
길이
assembly
code
동적
으로
할당
버퍼
복사
ㄴ다
복사
코드
크기
올바르
코드
이미
암호화
해지
코드
Sectioin
에서
복사
크기
만큼
바이트
임의
코드
ㄴ다
Loader
복사
코드
점프
ㄴ다
복사
크기
어셈블리
코드
실행
조작
코드
바로
다음
코드
점프
메모리
덤프
덤프
더라도
올바르
시작
주소
코드
으며
시작
주소
Entry
Point
Finder
로도
Image
base
Entry
point
text
section
copy
복사
이드
복사
바이트
data
section
loader
section
JMP
Address
